public class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        Collections.sort(A);
        backtracking(result,new ArrayList<Integer>(),B,A,0,0);

        Collections.sort(result,(ArrayList<Integer> X, ArrayList<Integer> Y)->{

            for(int i=0;i<X.size() && i<Y.size();i++){
                if(X.get(i)<Y.get(i)){
                    return -1;
                }else if(X.get(i)>Y.get(i)){
                    return 1;
                }
            }

            if(X.size()<Y.size()){
                return -1;
            }
            return -1;
        });

        return result;
    }

    private void backtracking(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> list, int B, ArrayList<Integer> A
    ,int sum,int index){


        if(index==A.size() || sum>=B){
            if(sum==B){
                if(!result.contains(list))
                    result.add(new ArrayList<>(list));
            }
            return;
        }

        sum+=A.get(index);
        list.add(A.get(index));
        backtracking(result,list,B,A,sum,index);
        sum-=A.get(index);
        list.remove(list.size()-1);
        backtracking(result,list,B,A,sum,index+1);




    }
}

