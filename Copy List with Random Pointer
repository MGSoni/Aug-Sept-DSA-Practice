/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {


        Node currNode = head;
        Node nextNode = null;

        while(currNode!=null){
            //copied next pointer 
            nextNode = currNode.next;
            Node temp = new Node(currNode.val);
            currNode.next = temp;
            temp.next=nextNode;
            currNode=nextNode;

        }

        currNode = head;
        while(currNode!=null){
            //copied random pointer
            if(currNode.random!=null){
                currNode.next.random=currNode.random.next;
            }
            currNode= currNode.next.next;
        }

        Node dummy = new Node(0);
        Node copyNode = dummy;
        currNode = head;
        nextNode=null;

        while(currNode!=null){
            nextNode = currNode.next.next;
            copyNode.next=currNode.next;
            copyNode=copyNode.next;
            currNode.next=nextNode;
            currNode=currNode.next;
        }

        return dummy.next;
        
    }
}
