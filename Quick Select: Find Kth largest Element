class Solution {
    public int findKthLargest(int[] nums, int k) {
        int val = nums.length-k;
        int x = quickSelect(nums,0,nums.length-1,val);
        return nums[x];
    }

    private int quickSelect(int[] nums, int l, int r,int val){

        int pivot = r;
        int left = l;
        int right = r;
        r--;
        while(l<=r){
            if(nums[l]<=nums[pivot]){
                l++;
            }else if(nums[r]>nums[pivot]){
                r--;
            }else{
                int temp = nums[r];
                nums[r]=nums[l];
                nums[l]=temp;
                l++;
                r--;
            }
        }

        int temp = nums[r+1];
        nums[r+1]=nums[pivot];
        nums[pivot]=temp;

        if(val==r+1){
            return r+1;
        }else if(val<r+1){
            return quickSelect(nums,left,r,val);
        }else{
            return quickSelect(nums,r+2,right,val);
        }

    }
}
