public class Solution {

    public ArrayList<ArrayList<Integer>> subsets(ArrayList<Integer> A) {
        
        ArrayList<ArrayList<Integer>> resultList = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> currList = new ArrayList<>();
        Collections.sort(A);
        backTrack(A,currList,0,resultList);

        Collections.sort(resultList,(ArrayList<Integer> x, ArrayList<Integer> y)-> {

                    for(int i=0;i<x.size() && i<y.size();i++){
                        if(x.get(i)<y.get(i)){
                            return -1;
                        }
                        if(x.get(i)>y.get(i)){
                            return 1;
                        }
                    }

                    if(x.size()<y.size()){
                        return -1;
                    }
                return 1;
            }
        );
        
        return resultList;

    }
    private void backTrack(ArrayList<Integer> A, ArrayList<Integer> currList,int N, ArrayList<ArrayList<Integer>> resultList){

        if(N==A.size()){
            ArrayList<Integer> copyList = new ArrayList<>(currList);
            resultList.add(copyList);
            return;
        }

        backTrack(A,currList,N+1,resultList);
        currList.add(A.get(N));
        backTrack(A,currList,N+1,resultList);
        currList.remove(currList.size()-1);
    }
}

